//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_UIEffectsControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Genesis.GameClient.UIEffectsController), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Resume", Resume);
		L.RegFunction("Pause", Pause);
		L.RegFunction("HasEffect", HasEffect);
		L.RegFunction("EffectIsShowing", EffectIsShowing);
		L.RegFunction("ShowEffect", ShowEffect);
		L.RegFunction("DestroyEffect", DestroyEffect);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsPaused", get_IsPaused, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.UIEffectsController));
			obj.Resume();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.UIEffectsController));
			obj.Pause();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.UIEffectsController));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasEffect(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EffectIsShowing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.UIEffectsController));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.EffectIsShowing(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.UIEffectsController));
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.ShowEffect(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.UIEffectsController), typeof(string)))
			{
				Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.DestroyEffect(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.UIEffectsController), typeof(int)))
			{
				Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.DestroyEffect(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.UIEffectsController.DestroyEffect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPaused(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.UIEffectsController obj = (Genesis.GameClient.UIEffectsController)o;
			bool ret = obj.IsPaused;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPaused on a nil value" : e.Message);
		}
	}
}

