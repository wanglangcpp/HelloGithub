//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_GeneralItemUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GeneralItemUtility");
		L.RegFunction("GetGeneralItemName", GetGeneralItemName);
		L.RegFunction("GetGeneralItemDescription", GetGeneralItemDescription);
		L.RegFunction("GetGeneralItemType", GetGeneralItemType);
		L.RegFunction("GetSkillBadgeBgSpriteName", GetSkillBadgeBgSpriteName);
		L.RegFunction("GetSkillBadgeCateogry", GetSkillBadgeCateogry);
		L.RegFunction("GetGeneralItemQuality", GetGeneralItemQuality);
		L.RegFunction("GetGeneralItemQualityColor", GetGeneralItemQualityColor);
		L.RegFunction("GetGeneralItemIconId", GetGeneralItemIconId);
		L.RegFunction("GetGeneralItemCount", GetGeneralItemCount);
		L.RegFunction("GetAllGearData", GetAllGearData);
		L.RegFunction("GetAllSoulData", GetAllSoulData);
		L.RegFunction("GetItemType", GetItemType);
		L.RegFunction("GetGearPosition", GetGearPosition);
		L.RegFunction("UpdateItemsData", UpdateItemsData);
		L.RegFunction("GetSkillBadgeDataRow", GetSkillBadgeDataRow);
		L.RegFunction("GetSkillBadgeIconId", GetSkillBadgeIconId);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemDescription(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemDescription(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Genesis.GameClient.GeneralItemType o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillBadgeBgSpriteName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.SkillBadgeSlotCategory arg0 = (Genesis.GameClient.SkillBadgeSlotCategory)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.SkillBadgeSlotCategory));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = Genesis.GameClient.GeneralItemUtility.GetSkillBadgeBgSpriteName(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillBadgeCateogry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Genesis.GameClient.SkillBadgeSlotCategory o = Genesis.GameClient.GeneralItemUtility.GetSkillBadgeCateogry(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemQuality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemQuality(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemQualityColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Color o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemQualityColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemIconId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemIconId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGeneralItemCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.GeneralItemUtility.GetGeneralItemCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllGearData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.List<Genesis.GameClient.GearDataWithHero> o = Genesis.GameClient.GeneralItemUtility.GetAllGearData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllSoulData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.List<Genesis.GameClient.SoulDataWithHero> o = Genesis.GameClient.GeneralItemUtility.GetAllSoulData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Genesis.GameClient.ItemType o = Genesis.GameClient.GeneralItemUtility.GetItemType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGearPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Genesis.GameClient.GearPosition o = Genesis.GameClient.GeneralItemUtility.GetGearPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateItemsData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.Collections.Generic.IList<Genesis.GameClient.PBItemInfo>)))
			{
				System.Collections.Generic.IList<Genesis.GameClient.PBItemInfo> arg0 = (System.Collections.Generic.IList<Genesis.GameClient.PBItemInfo>)ToLua.ToObject(L, 1);
				Genesis.GameClient.GeneralItemUtility.UpdateItemsData(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.PBItemInfo)))
			{
				Genesis.GameClient.PBItemInfo arg0 = (Genesis.GameClient.PBItemInfo)ToLua.ToObject(L, 1);
				Genesis.GameClient.GeneralItemUtility.UpdateItemsData(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.GeneralItemUtility.UpdateItemsData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillBadgeDataRow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Genesis.GameClient.DRBaseSkillBadge o = Genesis.GameClient.GeneralItemUtility.GetSkillBadgeDataRow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillBadgeIconId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.GeneralItemUtility.GetSkillBadgeIconId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

