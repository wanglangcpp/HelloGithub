//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_DataTableProxy_Genesis_GameClient_DROperationActivityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Object), "DataTableProxy_Genesis_GameClient_DROperationActivity");
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("GetAllDataRows", GetAllDataRows);
		L.RegFunction("GetDataRow", GetDataRow);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("HasDataRow", HasDataRow);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Count", get_Count, null);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Type", get_Type, null);
		L.RegVar("MinIdDataRow", get_MinIdDataRow, null);
		L.RegVar("MaxIdDataRow", get_MaxIdDataRow, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Genesis.GameClient.DROperationActivity o = obj[arg0];
			ToLua.PushObject(L, o);
			return 1;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, null);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Genesis.GameClient.DROperationActivity o = obj[arg0];
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllDataRows(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				Genesis.GameClient.DROperationActivity[] o = obj.GetAllDataRows();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Comparison<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				System.Comparison<Genesis.GameClient.DROperationActivity> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Comparison<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Comparison<Genesis.GameClient.DROperationActivity>), func) as System.Comparison<Genesis.GameClient.DROperationActivity>;
				}

				Genesis.GameClient.DROperationActivity[] o = obj.GetAllDataRows(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Predicate<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				System.Predicate<Genesis.GameClient.DROperationActivity> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Predicate<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Predicate<Genesis.GameClient.DROperationActivity>), func) as System.Predicate<Genesis.GameClient.DROperationActivity>;
				}

				Genesis.GameClient.DROperationActivity[] o = obj.GetAllDataRows(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Predicate<Genesis.GameClient.DROperationActivity>), typeof(System.Comparison<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				System.Predicate<Genesis.GameClient.DROperationActivity> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Predicate<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Predicate<Genesis.GameClient.DROperationActivity>), func) as System.Predicate<Genesis.GameClient.DROperationActivity>;
				}

				System.Comparison<Genesis.GameClient.DROperationActivity> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Comparison<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Comparison<Genesis.GameClient.DROperationActivity>), func) as System.Comparison<Genesis.GameClient.DROperationActivity>;
				}

				Genesis.GameClient.DROperationActivity[] o = obj.GetAllDataRows(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>.GetAllDataRows");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDataRow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Predicate<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				System.Predicate<Genesis.GameClient.DROperationActivity> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Predicate<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Predicate<Genesis.GameClient.DROperationActivity>), func) as System.Predicate<Genesis.GameClient.DROperationActivity>;
				}

				Genesis.GameClient.DROperationActivity o = obj.GetDataRow(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(int)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				Genesis.GameClient.DROperationActivity o = obj.GetDataRow(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>.GetDataRow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>));
			System.Collections.Generic.IEnumerator<Genesis.GameClient.DROperationActivity> o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasDataRow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(System.Predicate<Genesis.GameClient.DROperationActivity>)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				System.Predicate<Genesis.GameClient.DROperationActivity> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Predicate<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Predicate<Genesis.GameClient.DROperationActivity>), func) as System.Predicate<Genesis.GameClient.DROperationActivity>;
				}

				bool o = obj.HasDataRow(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>), typeof(int)))
			{
				Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.HasDataRow(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>.HasDataRow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)o;
			System.Type ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MinIdDataRow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)o;
			Genesis.GameClient.DROperationActivity ret = obj.MinIdDataRow;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MinIdDataRow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxIdDataRow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity> obj = (Genesis.GameClient.DataTableProxy<Genesis.GameClient.DROperationActivity>)o;
			Genesis.GameClient.DROperationActivity ret = obj.MaxIdDataRow;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxIdDataRow on a nil value" : e.Message);
		}
	}
}

