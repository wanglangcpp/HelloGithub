//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_LuaFormDisplayDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Genesis.GameClient.LuaFormDisplayData), typeof(Genesis.GameClient.UIFormBaseUserData));
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Add", Add);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Contains", Contains);
		L.RegFunction("ContainsKey", ContainsKey);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("Remove", Remove);
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("New", _CreateGenesis_GameClient_LuaFormDisplayData);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("RootGO", get_RootGO, set_RootGO);
		L.RegVar("Form", get_Form, set_Form);
		L.RegVar("ToggleGroupBaseValue", get_ToggleGroupBaseValue, set_ToggleGroupBaseValue);
		L.RegVar("Count", get_Count, null);
		L.RegVar("IsReadOnly", get_IsReadOnly, null);
		L.RegVar("Keys", get_Keys, null);
		L.RegVar("Values", get_Values, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGenesis_GameClient_LuaFormDisplayData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Genesis.GameClient.LuaFormDisplayData obj = new Genesis.GameClient.LuaFormDisplayData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Genesis.GameClient.LuaFormDisplayData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj[arg0] = arg1;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData), typeof(System.Collections.Generic.KeyValuePair<string,object>)))
			{
				Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.ToObject(L, 1);
				System.Collections.Generic.KeyValuePair<string,object> arg0 = (System.Collections.Generic.KeyValuePair<string,object>)ToLua.ToObject(L, 2);
				obj.Add(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData), typeof(string), typeof(object)))
			{
				Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.LuaFormDisplayData.Add");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			System.Collections.Generic.KeyValuePair<string,object> arg0 = (System.Collections.Generic.KeyValuePair<string,object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.KeyValuePair<string,object>));
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.ContainsKey(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			System.Collections.Generic.KeyValuePair<string,object>[] arg0 = ToLua.CheckObjectArray<System.Collections.Generic.KeyValuePair<string,object>>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.CopyTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData), typeof(string)))
			{
				Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.Remove(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData), typeof(System.Collections.Generic.KeyValuePair<string,object>)))
			{
				Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.ToObject(L, 1);
				System.Collections.Generic.KeyValuePair<string,object> arg0 = (System.Collections.Generic.KeyValuePair<string,object>)ToLua.ToObject(L, 2);
				bool o = obj.Remove(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.LuaFormDisplayData.Remove");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.LuaFormDisplayData));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = null;
			bool o = obj.TryGetValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RootGO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			UnityEngine.GameObject ret = obj.RootGO;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RootGO on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Form(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			Genesis.GameClient.NGUILuaForm ret = obj.Form;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Form on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ToggleGroupBaseValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			int ret = obj.ToggleGroupBaseValue;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ToggleGroupBaseValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReadOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			bool ret = obj.IsReadOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsReadOnly on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Keys(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			System.Collections.Generic.ICollection<string> ret = obj.Keys;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Keys on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			System.Collections.Generic.ICollection<object> ret = obj.Values;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Values on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RootGO(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.RootGO = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RootGO on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Form(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			Genesis.GameClient.NGUILuaForm arg0 = (Genesis.GameClient.NGUILuaForm)ToLua.CheckUnityObject(L, 2, typeof(Genesis.GameClient.NGUILuaForm));
			obj.Form = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Form on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ToggleGroupBaseValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LuaFormDisplayData obj = (Genesis.GameClient.LuaFormDisplayData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ToggleGroupBaseValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ToggleGroupBaseValue on a nil value" : e.Message);
		}
	}
}

