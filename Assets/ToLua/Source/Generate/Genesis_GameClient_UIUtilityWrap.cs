//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_UIUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UIUtility");
		L.RegFunction("CalculateDeltaExp", CalculateDeltaExp);
		L.RegFunction("GetUpdatableUIFragment", GetUpdatableUIFragment);
		L.RegFunction("WorldToUIPoint", WorldToUIPoint);
		L.RegFunction("ReplaceDictionaryTextForLabels", ReplaceDictionaryTextForLabels);
		L.RegFunction("SetStarLevel", SetStarLevel);
		L.RegFunction("SetHeroQualityLevel", SetHeroQualityLevel);
		L.RegFunction("GetElementSpriteName", GetElementSpriteName);
		L.RegFunction("GetHeroElement", GetHeroElement);
		L.RegFunction("GetHeroProtraitIconId", GetHeroProtraitIconId);
		L.RegFunction("GetHeroBigPortraitTextureId", GetHeroBigPortraitTextureId);
		L.RegFunction("GetHeroPortraitSpriteName", GetHeroPortraitSpriteName);
		L.RegFunction("GetPlayerPortraitIconId", GetPlayerPortraitIconId);
		L.RegFunction("GetProfessionName", GetProfessionName);
		L.RegFunction("GetLobbyHeroesIncludingUnpossessed", GetLobbyHeroesIncludingUnpossessed);
		L.RegFunction("GetLobbyHeroesUnpossessed", GetLobbyHeroesUnpossessed);
		L.RegFunction("GetLastLoginTimeString", GetLastLoginTimeString);
		L.RegFunction("GetTimeSpan", GetTimeSpan);
		L.RegFunction("GetTimeSpanString", GetTimeSpanString);
		L.RegFunction("GetTimeSpanStringHms", GetTimeSpanStringHms);
		L.RegFunction("GetTimeSpanStringYmd", GetTimeSpanStringYmd);
		L.RegFunction("TryGetAtlasAndSpriteName", TryGetAtlasAndSpriteName);
		L.RegFunction("CheckEnergy", CheckEnergy);
		L.RegFunction("CheckCurrency", CheckCurrency);
		L.RegFunction("GetSoulAttributeName", GetSoulAttributeName);
		L.RegFunction("GetSoulAttributeNameKey", GetSoulAttributeNameKey);
		L.RegFunction("RefreshToggleGroupsForChildren", RefreshToggleGroupsForChildren);
		L.RegFunction("GridAutoAdaptScreen", GridAutoAdaptScreen);
		L.RegFunction("RefreshToggleGroup", RefreshToggleGroup);
		L.RegFunction("GetUIForm", GetUIForm);
		L.RegFunction("ShowOkayButtonDialog", ShowOkayButtonDialog);
		L.RegFunction("ShowRestartAndCancelDialog", ShowRestartAndCancelDialog);
		L.RegFunction("ShowToast", ShowToast);
		L.RegFunction("ShowRestartDialog", ShowRestartDialog);
		L.RegFunction("GetSoulEffectValueText", GetSoulEffectValueText);
		L.RegFunction("SetPlayCountLabel", SetPlayCountLabel);
		L.RegFunction("GetPlayCount_OfflineArena", GetPlayCount_OfflineArena);
		L.RegFunction("GetPlayCount_InstanceForCoinResource", GetPlayCount_InstanceForCoinResource);
		L.RegFunction("GetPlayCount_InstanceForExpResource", GetPlayCount_InstanceForExpResource);
		L.RegFunction("GetPlayCount_MimicMelee", GetPlayCount_MimicMelee);
		L.RegFunction("GetAttributeValueStr", GetAttributeValueStr);
		L.RegFunction("IsInUIViewPort", IsInUIViewPort);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateDeltaExp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.PBPlayerInfo), typeof(Genesis.GameClient.PlayerData)))
			{
				Genesis.GameClient.PBPlayerInfo arg0 = (Genesis.GameClient.PBPlayerInfo)ToLua.ToObject(L, 1);
				Genesis.GameClient.PlayerData arg1 = (Genesis.GameClient.PlayerData)ToLua.ToObject(L, 2);
				int o = Genesis.GameClient.UIUtility.CalculateDeltaExp(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = Genesis.GameClient.UIUtility.CalculateDeltaExp(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.UIUtility.CalculateDeltaExp");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUpdatableUIFragment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			Genesis.GameClient.IUpdatableUIFragment o = Genesis.GameClient.UIUtility.GetUpdatableUIFragment(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldToUIPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1;
			bool o = Genesis.GameClient.UIUtility.WorldToUIPoint(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceDictionaryTextForLabels(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			UILabel[] arg1 = ToLua.CheckParamsObject<UILabel>(L, 2, count - 1);
			Genesis.GameClient.UIUtility.ReplaceDictionaryTextForLabels(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStarLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISprite[] arg0 = ToLua.CheckObjectArray<UISprite>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			Genesis.GameClient.UIUtility.SetStarLevel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeroQualityLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UISprite[] arg0 = ToLua.CheckObjectArray<UISprite>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			Genesis.GameClient.QualityType arg2 = (Genesis.GameClient.QualityType)ToLua.CheckObject(L, 3, typeof(Genesis.GameClient.QualityType));
			Genesis.GameClient.UIUtility.SetHeroQualityLevel(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetElementSpriteName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.UIUtility.GetElementSpriteName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeroElement(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.UIUtility.GetHeroElement(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeroProtraitIconId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.UIUtility.GetHeroProtraitIconId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeroBigPortraitTextureId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = Genesis.GameClient.UIUtility.GetHeroBigPortraitTextureId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeroPortraitSpriteName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.UIUtility.GetHeroPortraitSpriteName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerPortraitIconId(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				int o = Genesis.GameClient.UIUtility.GetPlayerPortraitIconId();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int o = Genesis.GameClient.UIUtility.GetPlayerPortraitIconId(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.UIUtility.GetPlayerPortraitIconId");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProfessionName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.UIUtility.GetProfessionName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLobbyHeroesIncludingUnpossessed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.List<Genesis.GameClient.BaseLobbyHeroData> o = Genesis.GameClient.UIUtility.GetLobbyHeroesIncludingUnpossessed();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLobbyHeroesUnpossessed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.List<Genesis.GameClient.UnpossessedLobbyHeroData> o = Genesis.GameClient.UIUtility.GetLobbyHeroesUnpossessed();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastLoginTimeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.TimeSpan arg0 = (System.TimeSpan)ToLua.CheckObject(L, 1, typeof(System.TimeSpan));
			string o = Genesis.GameClient.UIUtility.GetLastLoginTimeString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeSpan(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			System.TimeSpan o = Genesis.GameClient.UIUtility.GetTimeSpan(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeSpanString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.TimeSpan arg0 = (System.TimeSpan)ToLua.CheckObject(L, 1, typeof(System.TimeSpan));
			string o = Genesis.GameClient.UIUtility.GetTimeSpanString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeSpanStringHms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.TimeSpan arg0 = (System.TimeSpan)ToLua.CheckObject(L, 1, typeof(System.TimeSpan));
			string o = Genesis.GameClient.UIUtility.GetTimeSpanStringHms(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeSpanStringYmd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 1, typeof(System.DateTime));
			string o = Genesis.GameClient.UIUtility.GetTimeSpanStringYmd(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetAtlasAndSpriteName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = null;
			string arg2 = null;
			bool o = Genesis.GameClient.UIUtility.TryGetAtlasAndSpriteName(arg0, out arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushstring(L, arg1);
			LuaDLL.lua_pushstring(L, arg2);
			return 3;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckEnergy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = Genesis.GameClient.UIUtility.CheckEnergy(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCurrency(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.CurrencyType arg0 = (Genesis.GameClient.CurrencyType)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.CurrencyType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = Genesis.GameClient.UIUtility.CheckCurrency(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSoulAttributeName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.UIUtility.GetSoulAttributeName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSoulAttributeNameKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Genesis.GameClient.UIUtility.GetSoulAttributeNameKey(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshToggleGroupsForChildren(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			int o = Genesis.GameClient.UIUtility.RefreshToggleGroupsForChildren(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GridAutoAdaptScreen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UIGrid arg1 = (UIGrid)ToLua.CheckUnityObject(L, 2, typeof(UIGrid));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool o = Genesis.GameClient.UIUtility.GridAutoAdaptScreen(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshToggleGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIToggle arg0 = (UIToggle)ToLua.CheckUnityObject(L, 1, typeof(UIToggle));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			Genesis.GameClient.UIUtility.RefreshToggleGroup(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.UIFormId)))
			{
				Genesis.GameClient.UIFormId arg0 = (Genesis.GameClient.UIFormId)ToLua.ToObject(L, 1);
				Genesis.GameClient.NGUIForm o = Genesis.GameClient.UIUtility.GetUIForm(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Genesis.GameClient.UIFormId), typeof(LuaInterface.LuaOut<GameFramework.UI.IUIGroup>)))
			{
				Genesis.GameClient.UIFormId arg0 = (Genesis.GameClient.UIFormId)ToLua.ToObject(L, 1);
				GameFramework.UI.IUIGroup arg1 = null;
				Genesis.GameClient.NGUIForm o = Genesis.GameClient.UIUtility.GetUIForm(arg0, out arg1);
				ToLua.Push(L, o);
				ToLua.PushObject(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Genesis.GameClient.UIUtility.GetUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowOkayButtonDialog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Genesis.GameClient.UIUtility.ShowOkayButtonDialog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRestartAndCancelDialog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Genesis.GameClient.UIUtility.ShowRestartAndCancelDialog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowToast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Genesis.GameClient.UIUtility.ShowToast(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowRestartDialog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Genesis.GameClient.UIUtility.ShowRestartDialog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSoulEffectValueText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Genesis.GameClient.SoulData arg0 = (Genesis.GameClient.SoulData)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.SoulData));
			string o = Genesis.GameClient.UIUtility.GetSoulEffectValueText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPlayCountLabel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UILabel arg0 = (UILabel)ToLua.CheckUnityObject(L, 1, typeof(UILabel));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			Genesis.GameClient.UIUtility.SetPlayCountLabel(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayCount_OfflineArena(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0;
			int arg1;
			Genesis.GameClient.UIUtility.GetPlayCount_OfflineArena(out arg0, out arg1);
			LuaDLL.lua_pushinteger(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayCount_InstanceForCoinResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0;
			int arg1;
			Genesis.GameClient.UIUtility.GetPlayCount_InstanceForCoinResource(out arg0, out arg1);
			LuaDLL.lua_pushinteger(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayCount_InstanceForExpResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0;
			int arg1;
			Genesis.GameClient.UIUtility.GetPlayCount_InstanceForExpResource(out arg0, out arg1);
			LuaDLL.lua_pushinteger(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayCount_MimicMelee(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0;
			int arg1;
			Genesis.GameClient.UIUtility.GetPlayCount_MimicMelee(out arg0, out arg1);
			LuaDLL.lua_pushinteger(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttributeValueStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Genesis.GameClient.AttributeType arg0 = (Genesis.GameClient.AttributeType)ToLua.CheckObject(L, 1, typeof(Genesis.GameClient.AttributeType));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			string o = Genesis.GameClient.UIUtility.GetAttributeValueStr(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInUIViewPort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			bool o = Genesis.GameClient.UIUtility.IsInUIViewPort(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

