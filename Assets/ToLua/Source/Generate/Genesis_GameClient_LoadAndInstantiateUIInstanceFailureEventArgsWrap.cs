//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Genesis_GameClient_LoadAndInstantiateUIInstanceFailureEventArgsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs), typeof(GameFramework.Event.GameEventArgs));
		L.RegFunction("New", _CreateGenesis_GameClient_LoadAndInstantiateUIInstanceFailureEventArgs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AssetName", get_AssetName, null);
		L.RegVar("ErrorMessage", get_ErrorMessage, null);
		L.RegVar("Status", get_Status, null);
		L.RegVar("UserData", get_UserData, null);
		L.RegVar("Id", get_Id, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGenesis_GameClient_LoadAndInstantiateUIInstanceFailureEventArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.Resource.LoadResourceStatus arg1 = (GameFramework.Resource.LoadResourceStatus)ToLua.CheckObject(L, 2, typeof(GameFramework.Resource.LoadResourceStatus));
				string arg2 = ToLua.CheckString(L, 3);
				object arg3 = ToLua.ToVarObject(L, 4);
				Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = new Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = (Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs)o;
			string ret = obj.AssetName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AssetName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = (Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs)o;
			string ret = obj.ErrorMessage;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ErrorMessage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = (Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs)o;
			GameFramework.Resource.LoadResourceStatus ret = obj.Status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = (Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs)o;
			object ret = obj.UserData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UserData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs obj = (Genesis.GameClient.LoadAndInstantiateUIInstanceFailureEventArgs)o;
			int ret = obj.Id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Id on a nil value" : e.Message);
		}
	}
}

