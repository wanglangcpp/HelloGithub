//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// Proto source: 1078_LCSystemNotify.proto
//----------------------------------------------------------------------------------------------------

using ProtoBuf;
using System;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    [Serializable, ProtoContract(Name = @"LCSystemNotify")]
    public partial class LCSystemNotify : PacketBase
    {
        public LCSystemNotify() { }

        public override PacketType PacketType { get { return PacketType.LobbyServerToClient; } }

        public override int PacketActionId { get { return 1078; } }

        private int? m_contextId;
        [ProtoMember(1, Name = @"contextId", IsRequired = false, DataFormat = DataFormat.TwosComplement)]
        public int contextId
        {
            get { return m_contextId ?? default(int); }
            set { m_contextId = value; }
        }
        public bool HascontextId { get { return m_contextId != null; } }
        private void ResetcontextId() { m_contextId = null; }
        private bool ShouldSerializecontextId() { return HascontextId; }

        private string m_context;
        [ProtoMember(2, Name = @"context", IsRequired = false, DataFormat = DataFormat.Default)]
        public string context
        {
            get { return m_context ?? ""; }
            set { m_context = value; }
        }
        public bool Hascontext { get { return m_context != null; } }
        private void Resetcontext() { m_context = null; }
        private bool ShouldSerializecontext() { return Hascontext; }

        private int? m_contextType;
        [ProtoMember(3, Name = @"contextType", IsRequired = false, DataFormat = DataFormat.TwosComplement)]
        public int contextType
        {
            get { return m_contextType ?? default(int); }
            set { m_contextType = value; }
        }
        public bool HascontextType { get { return m_contextType != null; } }
        private void ResetcontextType() { m_contextType = null; }
        private bool ShouldSerializecontextType() { return HascontextType; }

        private readonly List<string> m_otherInfo = new List<string>();
        [ProtoMember(4, Name = @"otherInfo", DataFormat = DataFormat.Default)]
        public List<string> otherInfo
        {
            get { return m_otherInfo; }
        }
    }
}
