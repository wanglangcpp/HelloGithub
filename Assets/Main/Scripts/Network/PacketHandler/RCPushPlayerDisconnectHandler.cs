//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;

namespace Genesis.GameClient
{
    public class RCPushPlayerDisconnectHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.RoomServerToClient, 4016); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as RCPushPlayerDisconnect);
        }

        public static void Handle(object sender, RCPushPlayerDisconnect response)
        {
            if (GameEntry.Data.Room.HasReconnected)
            {
                return;
            }
            //TODO: 现在只有掉线通知没有上线通知
            if (GameEntry.Data.PvpArenaOpponent.Player.Id == response.PlayerId)
            {
                GameEntry.Data.PvpArenaOpponent.DisConnected = response.Status;
            }
            GameEntry.Event.Fire(sender, new SinglePvpOtherPlayerDisconnectEventArgs(response.PlayerId, response.Status));
        }
    }
    public class SinglePvpOtherPlayerDisconnectEventArgs : GameFramework.Event.GameEventArgs
    {
        /// <summary>
        /// 在后台持续的事件
        /// </summary>
        public bool ConnectState { private set; get; }
        public int PlayerId { private set; get; }
        public SinglePvpOtherPlayerDisconnectEventArgs(int playerId, bool connectState)
        {
            ConnectState = connectState;
            PlayerId = playerId;
        }

        public override int Id
        {
            get
            {
                return (int)EventId.SinglePvpOtherPlayerDisconnect;
            }
        }
    }
}
