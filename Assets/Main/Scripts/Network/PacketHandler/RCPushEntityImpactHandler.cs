//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    public class RCPushEntityImpactHandler : BasePacketHandler
    {
        private const string LogTag = "RCPushEntityImpactHandler";

        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.RoomServerToClient, 4103); } }

        public override void Handle(object sender, Packet packet)
        {
            if (GameEntry.Data.Room.HasReconnected)
            {
                return;
            }

            base.Handle(sender, packet);
            RCPushEntityImpact response = packet as RCPushEntityImpact;

            if (GameEntry.SceneLogic.SinglePvpInstanceLogic.PlayerIsMe(response.OriginPlayerId))
            {
                return;
            }

            List<BaseApplyImpactData> impactDatas = new List<BaseApplyImpactData>();

            EntityData originData = null;
            if (response.HasOriginEntityId)
            {
                originData = GameEntry.Data.GetEntityData(response.OriginEntityId);
            }

            GameEntry.RoomLogic.AddLog(LogTag, "Begins");

            EntityData targetData = GameEntry.Data.GetEntityData(response.TargetEntityId);
            SyncTransformIsNeeded(response, targetData);
            AddBuffs(response, response.BuffIdsAddedToTarget, originData != null ? originData.Entity : null, targetData.Entity as TargetableObject);

            for (int i = 0; i < response.HPDamageImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyHPDamageImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.HPDamageImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.HPDamageImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "HP Damage: {{{0}}}", ad);
            }

            for (int i = 0; i < response.HPRecoverImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyHPRecoverImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.HPRecoverImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.HPRecoverImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "HP Recover: {{{0}}}", ad);
            }

            for (int i = 0; i < response.SteadyDamageImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplySteadyDamageImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.SteadyDamageImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.SteadyDamageImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Steady Damage: {{{0}}}", ad);
            }

            for (int i = 0; i < response.StiffnessImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyStiffnessImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.StiffnessImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.StiffnessImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Stiffness: {{{0}}}", ad);
            }

            for (int i = 0; i < response.FloatImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyFloatImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.FloatImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.FloatImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Float: {{{0}}}", ad);
            }

            for (int i = 0; i < response.BlownAwayImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyBlownAwayImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.BlownAwayImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.BlownAwayImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Blown Away: {{{0}}}", ad);
            }

            for (int i = 0; i < response.StunImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyStunImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.StunImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.StunImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Stun: {{{0}}}", ad);
            }

            for (int i = 0; i < response.FreezeImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyFreezeImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.FreezeImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.FreezeImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Freeze: {{{0}}}", ad);
            }

            for (int i = 0; i < response.HardHitImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplyHardHitImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.HardHitImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.HardHitImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Hard Hit: {{{0}}}", ad);
            }

            for (int i = 0; i < response.SoundAndEffectImpacts.Count; i++)
            {
                var ad = BaseApplyImpactData.Create<ApplySoundAndEffectImpactData>(originData, targetData, (ImpactSourceType)response.ImpactSourceType, response.SoundAndEffectImpacts[i].ImpactId);
                ad.FillBaseInfo(response);
                ad.Fill(response.SoundAndEffectImpacts[i]);
                impactDatas.Add(ad);
                GameEntry.RoomLogic.AddLog(LogTag, "Sound And Effect: {{{0}}}", ad);
            }

            GameEntry.Impact.ApplyImpacts(impactDatas.ToArray());
            GameEntry.RoomLogic.AddLog(LogTag, "Ends");
        }

        private void SyncTransformIsNeeded(RCPushEntityImpact response, EntityData targetData)
        {
            if (targetData == null)
            {
                return;
            }

            var target = targetData.Entity;
            if (target == null)
            {
                return;
            }

            if (response.BlownAwayImpacts.Count <= 0
                && response.FloatImpacts.Count <= 0
                && response.FreezeImpacts.Count <= 0
                && response.HardHitImpacts.Count <= 0
                && response.StiffnessImpacts.Count <= 0
                && response.StunImpacts.Count <= 0)
            {
                return;
            }

            var pbTransform = response.TargetTransform;
            target.Data.UpdateTransform(pbTransform);
            target.UpdateTransform(pbTransform);

        }

        private void AddBuffs(RCPushEntityImpact response, IList<int> buffIdsAddedToTarget, Entity origin, TargetableObject target)
        {
            if (target == null)
            {
                var targetEntity = GameEntry.Entity.GetGameEntity(response.TargetEntityId);
                var logString = string.Format("Target entity with ID '{0}' is not a TargetableObject, but instead a '{1}'.", response.TargetEntityId.ToString(), targetEntity == null ? "null" : targetEntity.GetType().Name);
                GameEntry.RoomLogic.AddLog(LogTag, logString);
                return;
            }

            if (origin == null && response.OriginEntityId > 0)
            {
                var logString = string.Format("Buff origin is invalid.");
                GameEntry.RoomLogic.AddLog(LogTag, logString);
                return;
            }

            for (int i = 0; i < buffIdsAddedToTarget.Count; ++i)
            {
                int buffId = buffIdsAddedToTarget[i];
                GameEntry.RoomLogic.AddLog(LogTag, "OriginEntityId: {0}, TargetEntityId: {1}, BuffId: {2}", response.OriginEntityId.ToString(), response.TargetEntityId.ToString(), response.BuffId.ToString());

                // TODO: 将 Buff 所有者指定技能索引处的技能徽章信息传入。
                target.AddBuff(buffId, origin == null ? null : origin.Data, OfflineBuffPool.GetNextSerialId(), null);
            }
        }
    }
}
