//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    public class LCLeaveArenaHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 2303); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCLeaveArena);
        }

        public static void Handle(object sender, LCLeaveArena response)
        {
            int arenaCoinObtained = 0;
            int arenaTokenObtained = 0;
            List<ItemData> arenaItemsObtained = new List<ItemData>();
            if (response.ItemInfo != null)
            {
                List<PBItemInfo> instanceItems = new List<PBItemInfo>();
                for (int i = 0; i < response.ItemInfo.Count; i++)
                {
                    int count = response.ItemInfo[i].Count - GeneralItemUtility.GetGeneralItemCount(response.ItemInfo[i].Type);
                    instanceItems.Add(new PBItemInfo { Type = response.ItemInfo[i].Type, Count = count });
                    ItemData itemData = new ItemData();
                    itemData.UpdateData(instanceItems[i]);
                    arenaItemsObtained.Add(itemData);
                }
                GeneralItemUtility.UpdateItemsData(response.ItemInfo);
            }

            int oldCoin = GameEntry.Data.Player.Coin;
            int oldToken = GameEntry.Data.Player.ArenaToken;
            GameEntry.Data.Player.UpdateData(response.PlayerInfo);
            arenaCoinObtained = GameEntry.Data.Player.Coin - oldCoin;
            arenaTokenObtained = GameEntry.Data.Player.ArenaToken - oldToken;
            int newRank = response.HasMyRank ? response.MyRank : GameEntry.Data.OfflineArena.CurrentRank;

            GameEntry.Event.Fire(sender, new PlayerDataChangedEventArgs());
            GameEntry.Event.Fire(sender, new OfflineArenaBattleResultDataObtainedEventArgs(arenaCoinObtained, arenaTokenObtained, GameEntry.Data.OfflineArena.CurrentRank, newRank, arenaItemsObtained));

            GameEntry.Data.OfflineArena.RefreshRank(newRank);
            GameEntry.Data.OfflineArenaBattleReports.AddData(response.ArenaReportInfo);
            GameEntry.Event.Fire(sender, new OfflineArenaDataChangedEventArgs());
        }
    }
}
