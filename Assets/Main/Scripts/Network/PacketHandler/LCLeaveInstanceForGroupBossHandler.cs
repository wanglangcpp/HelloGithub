//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    public class LCLeaveInstanceForGroupBossHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 2631); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCLeaveInstanceForGroupBoss);
        }

        public static void Handle(object sender, LCLeaveInstanceForGroupBoss response)
        {
            GameEntry.Data.Player.UpdateData(response.PlayerInfo);
            for (int i = 0; i < response.LobbyHeroInfo.Count; i++)
            {
                LobbyHeroData data = GameEntry.Data.LobbyHeros.GetData(response.LobbyHeroInfo[i].Type);
                data.UpdateData(response.LobbyHeroInfo[i]);
            }

            if (response.ItemInfo != null)
            {
                List<PBItemInfo> instanceItems = new List<PBItemInfo>();
                for (int i = 0; i < response.ItemInfo.Count; i++)
                {
                    int count = response.ItemInfo[i].Count - GeneralItemUtility.GetGeneralItemCount(response.ItemInfo[i].Type);
                    instanceItems.Add(new PBItemInfo { Type = response.ItemInfo[i].Type, Count = count });
                }
                GameEntry.Data.InstanceGoods.ClearAndAddData(instanceItems);
                GeneralItemUtility.UpdateItemsData(response.ItemInfo);
            }
            var starCount = GameEntry.Data.InstanceForBossData.DicInstanceStarCount;
            var challengeCount = GameEntry.Data.InstanceForBossData.DicInstanceChallengeCount;
            if (!challengeCount.ContainsKey(response.InstanceType))
                GameEntry.Data.InstanceForBossData.DicInstanceChallengeCount.Add(response.InstanceType, 1);
            else
                GameEntry.Data.InstanceForBossData.DicInstanceChallengeCount[response.InstanceType]++;
            if (response.Win)
            {
                //TODO:保存boss副本进度
                //InstanceProgressData instanceProgressData = GameEntry.Data.InstanceProgresses.GetData(response.InstanceType);
                //if (instanceProgressData == null)
                //{
                //    GameEntry.Data.InstanceProgresses.AddData(new PBInstanceForGroupBossProgressInfo { Id = response.InstanceType, StarCount = response.StarCount });
                //    GameEntry.Event.Fire(sender, new InstanceProgressDataChangedEventArgs());
                //}
                //else if (response.StarCount > instanceProgressData.StarCount)
                //{
                //    instanceProgressData.UpdateData(new PBInstanceProgressInfo { Id = response.InstanceType, StarCount = response.StarCount });
                //    GameEntry.Event.Fire(sender, new InstanceProgressDataChangedEventArgs());
                //}
                GameEntry.Data.InstanceForBossData.UpdataStarCount(new List<PBInstanceForGroupBossProgressInfo>() { new PBInstanceForGroupBossProgressInfo() { Id = response.InstanceType, StarCount = response.StarCount } });
            }

            GameEntry.Event.Fire(sender, new InstanceForBossEventArgs());

            GameEntry.Data.InstanceGroups.ModifyLevel(response.InstanceType);

            GameEntry.Event.Fire(sender, new PlayerDataChangedEventArgs());
            GameEntry.Event.Fire(sender, new LobbyHeroDataChangedEventArgs());
            GameEntry.Event.Fire(sender, new ItemDataChangedEventArgs());
            GameEntry.Event.Fire(sender, new HeroQualityItemDataChangeEventArgs());
            GameEntry.Event.Fire(sender, new LeaveInstanceResponseEventArgs());

        }
    }
}
