//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework;
using GameFramework.Network;

namespace Genesis.GameClient
{
    public class LCPlayerBattleStatusHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 5013); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCPlayerBattleStatus);
        }

        public static void Handle(object sender, LCPlayerBattleStatus response)
        {
            Log.Debug("LCPlayerBattleStatusHandler " + response.BattleStatus);
            if (response.BattleStatus == 0)
            {
                return;
            }
            if (response.BattleStatus == 1)
            {
                GameEntry.Data.Room.HasReconnected = true;
                GameEntry.Network.SetNetworkChannelConnection(Constant.Network.RoomNetworkChannelName, false, response.PvpMatchInfo.Host, response.PvpMatchInfo.Port);
                GameEntry.Data.AddOrUpdateTempData(Constant.TempData.RoomId, response.PvpMatchInfo.RoomId);
                GameEntry.Data.AddOrUpdateTempData(Constant.TempData.RoomServerToken, response.PvpMatchInfo.Token);

                GameEntry.Data.PvpArenaOpponent.UpdateData(response.PvpMatchInfo.Opp, response.PvpMatchInfo.ServerId, response.PvpMatchInfo.ServerName, response.PvpMatchInfo.OppIndex, response.PvpMatchInfo.OppScore);

                GameEntry.Data.SingleMatchData.UpdateData(response.PvpMatchInfo.Me, response.PvpMatchInfo.MeIndex, 1, response.PvpMatchInfo.MeScore);
                //response.RoomId
                //GameEntry.Event.Fire(sender, new SingleMatchSuccessArgs(1));
                if (!(GameEntry.Procedure.CurrentProcedure is ProcedureMain))
                {
                    Log.Warning("Current procedure is not main!");
                    return;
                }
                GameEntry.Event.Fire(sender, new WillChangeSceneEventArgs(InstanceLogicType.SinglePvp, 1, false));
                Log.Info("Match PVP success, room id '{0}', server url '{1}:{2}'.", response.PvpMatchInfo.RoomId.ToString(), response.PvpMatchInfo.Host, response.PvpMatchInfo.Port.ToString());
            }
        }
    }
}
