//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;

namespace Genesis.GameClient
{
    public class LCSignInHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 1003); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            LCSignIn response = packet as LCSignIn;

            GameEntry.ServerConfig.UpdateData(response.ServerConfigInfo);

            GameEntry.Data.VipsData.ClearAndAddData(response.VipInfo.VipPrivilegeInfo);
            GameEntry.Data.Player.UpdateData(response.PlayerInfo);
            GameEntry.Data.Friends.RefreshData(response.FriendInfo);
            GameEntry.Data.Friends.ModifyTodayGiveCount(response.FriendEnergyInfo.TodayGiveCount);
            GameEntry.Data.Friends.ModifyTodyClaimCount(response.FriendEnergyInfo.TodayClaimCount);
            GameEntry.Data.FriendRequests.RefreshData(response.FriendRequestInfo);

            GameEntry.Data.Mails.RefreshMails(response.MailInfo);
            GameEntry.Event.Fire(this, new MailDataChangedEventArgs());

            GameEntry.Event.Fire(this, new PlayerDataChangedEventArgs());
            JPushNativeCaller.SetAlias(response.PlayerInfo.Id.ToString());
            BuglyAgent.SetUserId(BuglyUtility.UserId);

            GameEntry.Data.LobbyHeros.ClearAndAddData(response.LobbyHeroInfo);
            GameEntry.Event.Fire(this, new LobbyHeroDataChangedEventArgs());

            GameEntry.Data.HeroTeams.ClearAndAddData(response.HeroTeamInfo);
            GameEntry.Event.Fire(this, new HeroTeamDataChangedEventArgs(HeroTeamType.HeroTeamTypeCount));

            GameEntry.Data.InstanceProgresses.ClearAndAddData(response.InstanceProgressInfo);
            GameEntry.Event.Fire(this, new InstanceProgressDataChangedEventArgs());
            GameEntry.Data.InstanceGroups.InitializeChestData(response.InstanceGroupChestStatus);
            GameEntry.Data.Items.ClearData();
            GameEntry.Data.HeroQualityItems.ClearData();
            GeneralItemUtility.UpdateItemsData(response.ItemInfo);
            GameEntry.Data.Chat.ChatPrepare();
            GameEntry.Event.Fire(this, new ItemDataChangedEventArgs());
            GameEntry.Event.Fire(this, new HeroQualityItemDataChangeEventArgs());

            GameEntry.Data.Meridian.UpdateData(response.MeridianInfo);

            GameEntry.Data.ShopsData.UpdateData(response.ShopInfo);

            GameEntry.Data.Chances.UpdateData(response.ChanceInfo);

            GameEntry.Data.OfflineArenaBattleReports.ClearAndAddData(response.ArenaInfo.ArenaReportInfos);
            GameEntry.Data.OfflineArena.UpdateArenaData(response.ArenaInfo);

            GameEntry.Data.DailyLogin.UpdateData(response.DailyLoginInfo.ClaimCount, response.DailyLoginInfo.CanClaim);
            //
            GameEntry.Data.EveryDaySignInData.UpdataData(response.DailyLoginInfo);

            GameEntry.Data.OnlineRewardsData.UpdataData(response.OnlineRewardInfo);

            GameEntry.Data.SevenDayLoginData.UpdataData(response.SevenDayLoginInfo);

            if (response.FuntionId != null)
            {
                GameEntry.OpenFunction.InitServerOpenList(response.FuntionId);
            }

            if (response.InstanceForCoinResource != null)
            {
                GameEntry.Data.InstanceForCoinResourceData.UpdateData(response.InstanceForCoinResource);
            }

            if (response.InstanceForExpResource != null)
            {
                GameEntry.Data.InstanceForExpResourceData.UpdateData(response.InstanceForExpResource);
            }

            GameEntry.Data.Achievements.ClearAndAddData(response.AchievementInfo);
            GameEntry.Data.DailyQuests.ClearAndAddData(response.DailyQuestInfo);
            GameEntry.Data.DailyQuests.ClaimActivenessChestStatus = response.DailyQuestActivenessInfo.ClaimRewardStatus;

            GameEntry.NoviceGuide.Init();

            //if (response.PlayerPvpInfo != null)
            //{
            //    GameEntry.Network.SetNetworkChannelConnection(Constant.Network.RoomNetworkChannelName, false, response.PlayerPvpInfo.RoomHost, response.PlayerPvpInfo.RoomPort);
            //    GameEntry.Data.AddOrUpdateTempData(Constant.TempData.RoomId, response.PlayerPvpInfo.RoomId);
            //    GameEntry.Data.AddOrUpdateTempData(Constant.TempData.RoomServerToken, response.PlayerPvpInfo.Token);
            //    GameEntry.Data.Room.UpdateData(response.PlayerPvpInfo);
            //}
            GameEntry.Event.Fire(this, new SignInPrepareEventArgs());
            GameEntry.Event.Fire(this, new InstancesForResourceDataChangedEventArgs());

            GameEntry.Data.StromTowerData.UpdateData(response.InstanceForTowerInfo);
            GameEntry.Event.Fire(this, new StromTowerInfoEventArgs(response.InstanceForTowerInfo));

            GameEntry.Data.InstanceForBossData.UpdataChallengeCount(response.InstanceForGroupBossJoinCountsInfo);
            GameEntry.Data.InstanceForBossData.UpdataStarCount(response.InstanceForGroupBossProgressInfo);
            GameEntry.Data.InstanceForBossData.UpdataChestStatusData(response.InstanceForBossGroupChestStatus);

            //GameEntry.Data.ChargeTable = response.ChargeInfo;
        }
    }
}
