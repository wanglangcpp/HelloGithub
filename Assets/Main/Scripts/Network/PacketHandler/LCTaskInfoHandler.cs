//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    public class LCTaskInfoHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 1500); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCTaskInfo);
        }

        public static void Handle(object sender, LCTaskInfo response)
        {
            var TaskTable = GameEntry.DataTable.GetDataTable<DRTask>();
            List<PBTaskInfo> tasksInfo = response.tasks;
            if (response.state == 1)
            {
                TaskItemInfoData taskData = new TaskItemInfoData();
                foreach (var item in tasksInfo)
                {
                    taskData.CurrentTaskListId.Add(item.TaskId);

                    DRTask currentTask = TaskTable.GetDataRow(item.TaskId);
                    TaskStep taskInfo = new TaskStep();
                    taskInfo.Task = currentTask;
                    taskInfo.Step = item.conditon1;
                    if (currentTask.ComType == (int)ComType.LogIn)
                        taskInfo.IsFinish = true;
                    else
                    {
                        taskInfo.IsFinish = item.conditon1 >= currentTask.Conditions[0];
                    }
                    taskInfo.ClaimRewardTime = item.ClaimRewardTime;
                    taskInfo.LastUpdateTime = item.LastUpdateTime;
                    taskData.CurrentTaskList.Add(taskInfo);
                }
                taskData.Activeness = response.Activeness;
                GameEntry.Data.TaskStepData.UpdateData(taskData);
            }
            else if (response.state == 2)
            {
                TaskItemInfoData taskData = GameEntry.Data.TaskStepData.TasksItemData;
                foreach (var item in tasksInfo)
                {
                    if (taskData.CurrentTaskListId.Contains(item.TaskId))
                    {
                        TaskStep taskInfo = taskData.CurrentTaskList.Find(x => x.Task.Id == item.TaskId);
                        taskInfo.Step = item.conditon1;
                        if (taskInfo.Task.ComType == (int)ComType.LogIn)
                            taskInfo.IsFinish = true;
                        else
                        {
                            taskInfo.IsFinish = item.conditon1 >= taskInfo.Task.Conditions[0];
                        }
                        taskInfo.ClaimRewardTime = item.ClaimRewardTime;
                        taskInfo.LastUpdateTime = item.LastUpdateTime;
                    }
                }
                taskData.Activeness = response.Activeness;
                GameEntry.Data.TaskStepData.UpdateData(taskData);
            }
            GameEntry.Event.Fire(sender, new TasksListChangedEventArgs(response.tasks));

            List<int> taskIDList = new List<int>();
            foreach (var item in tasksInfo) taskIDList.Add(item.TaskId);
            GameEntry.OpenFunction.InitTaskList(taskIDList);
        }
    }
}
