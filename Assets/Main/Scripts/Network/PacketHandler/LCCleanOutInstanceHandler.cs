//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework.Network;
using System.Collections.Generic;

namespace Genesis.GameClient
{
    public class LCCleanOutInstanceHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 1006); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCCleanOutInstance);
        }

        public static void Handle(object sender, LCCleanOutInstance response)
        {
            int obtainedCoin = 0;
            int obtainedExperience = 0;

            if (response.PlayerInfo.HasCoin)
                obtainedCoin = response.PlayerInfo.Coin - GameEntry.Data.Player.Coin;

            if (response.PlayerInfo.HasExp)
                obtainedExperience = UIUtility.CalculateDeltaExp(response.PlayerInfo, GameEntry.Data.Player);

            GameEntry.Data.Player.UpdateData(response.PlayerInfo);
            // GeneralItemUtility.UpdateItemsData(response.ItemInfo);

            var helper = new RewardCollectionHelper();
            helper.AddItems(response.ItemInfo);
            var items = helper.ReceiveGoodsData.GetItems();

            List<PBItemInfo> itemInfo = new List<PBItemInfo>();
            for (int i = 0; i < items.Count; i++)
                itemInfo.Add(new PBItemInfo() { Type = items[i].Key, Count = items[i].Value });

            GameEntry.Event.Fire(sender, new PlayerDataChangedEventArgs());
            GameEntry.Event.Fire(sender, new CleanOutInstanceEventArgs(itemInfo, obtainedCoin, obtainedExperience));
        }
    }
}
