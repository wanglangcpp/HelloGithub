//----------------------------------------------------------------------------------------------------
// This code was auto generated by tools.
// You may need to modify 'Handle' method.
// Don't modify the rest unless you know what you're doing.
//----------------------------------------------------------------------------------------------------

using GameFramework;
using GameFramework.Network;

namespace Genesis.GameClient
{
    public class LCEnterInstanceForResourceHandler : BasePacketHandler
    {
        public override int OpCode { get { return NetworkHelper.GetOpCode(PacketType.LobbyServerToClient, 2600); } }

        public override void Handle(object sender, Packet packet)
        {
            base.Handle(sender, packet);
            Handle(sender, packet as LCEnterInstanceForResource);
        }

        public static void Handle(object sender, LCEnterInstanceForResource response)
        {
            var drInstance = GameEntry.DataTable.GetDataTable<DRInstanceForResource>().GetDataRow(response.InstanceForResourceId);
            if (drInstance == null)
            {
                Log.Error("Instance-for-resource '{0}' not found in data table.", response.InstanceForResourceId);
                return;
            }

            switch (drInstance.InstanceResourceType)
            {
                case InstanceForResourceType.Coin:
                    GameEntry.Data.InstanceForCoinResourceData.UpdateData(new PBInstanceForCoinResourceInfo { PlayedCount = response.PlayedCount });
                    break;
                case InstanceForResourceType.Exp:
                default:
                    GameEntry.Data.InstanceForExpResourceData.UpdateData(new PBInstanceForExpResourceInfo { PlayedCount = response.PlayedCount });
                    break;
            }

            if (GameEntry.Procedure.CurrentProcedure is ProcedureMain)
            {
                GameEntry.Event.Fire(sender, new WillChangeSceneEventArgs(InstanceLogicType.ForResource, response.InstanceForResourceId, true));
            }
        }
    }
}
